<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="DoNotCatchCorruptedStateExceptions" xml:space="preserve">
    <value>Do not catch corrupted state exceptions in general handlers.</value>
    <comment>CA2153</comment>
  </data>
  <data name="DoNotCatchCorruptedStateExceptionsDescription" xml:space="preserve">
    <value>Do not author general catch handlers in code that receives corrupted state exceptions. Code that receives and intends to handle corrupted state exceptions should author distinct handlers for each exception type.</value>
    <comment>CA2153</comment>
  </data>
  <data name="DoNotCatchCorruptedStateExceptionsMessage" xml:space="preserve">
    <value>Modify {0} to catch and handle a more specific set of exception type(s) than {1} or rethrow the exception. </value>
    <comment>CA2153</comment>
  </data>
  <data name="DoNotUseDtdProcessingOverloadsDescription" xml:space="preserve">
    <value>This API internally enables DTD processing on the XML reader instance used, and uses UrlResolver for resolving external XML entities. The outcome is information disclosure. Content from file system or network shares for the machine processing the XML can be exposed to attacker. In addition, an attacker can use this as a DoS vector.</value>
    <comment>CA3075</comment>
  </data>
  <data name="DoNotUseDtdProcessingOverloadsDiagnosis" xml:space="preserve">
    <value>Do not use unsafe overload of '{0}' method, replace with an overload that takes an XmlReader instance.</value>
    <comment>CA3075</comment>
  </data>
  <data name="DoNotUseSetInnerXmlDescription" xml:space="preserve">
    <value>Setting the InnerXml property of XmlDocument is potentially unsafe. This API internally enables DTD processing on the XML reader instance used, and uses UrlResolver for resolving external XML entities. The outcome is information disclosure. Content from file system or network shares for the machine processing the XML can be exposed to attacker. In addition, an attacker can use this as a DoS vector.</value>
    <comment>CA3075</comment>
  </data>
  <data name="DoNotUseSetInnerXmlDiagnosis" xml:space="preserve">
    <value>Do not use the unsafe setter of InnerXml property of System.Xml.XmlDocument, replace with a call to the Load() method overload that takes an XmlReader instance.</value>
    <comment>CA3075</comment>
  </data>
  <data name="InsecureDtdProcessingInApiDesign" xml:space="preserve">
    <value>Insecure DTD processing in API design.</value>
    <comment>CA3077</comment>
  </data>
  <data name="InsecureXmlDtdProcessing" xml:space="preserve">
    <value>Insecure DTD processing in XML</value>
    <comment>CA3075</comment>
  </data>
  <data name="InsecureXsltScriptProcessing" xml:space="preserve">
    <value>Insecure XSLT script processing.</value>
    <comment>CA3076</comment>
  </data>
  <data name="InsecureXsltScriptProcessingDescription" xml:space="preserve">
    <value>Providing an insecure XsltSettings instance and an insecure XmlResolver instance to XslCompiledTransform.Load method is potentially unsafe as it allows processing script within XSL, which, on untrusted XSL input, may lead to malicious code execution. Either replace the insecure XsltSettings argument with XsltSettings.Default or an instance that has disabled document function and script execution, or replace the XmlResolver argurment with null or an XmlSecureResolver instance. This message may be suppressed if the input is known to be from a trusted source and external resource resolution from locations that are not known in advance must be supported.</value>
    <comment>CA3076</comment>
  </data>
  <data name="MakeDtdProcessingSecureInApiDesignXmlDocumentDescription" xml:space="preserve">
    <value>Ensure that  DTD processing is secure on all instances of classes derived from System.Xml.XmlDocument by explicitly setting XmlResolver property to a secure value (instance of XmlSecureResolver or null). Using default resolver for resolving external XML entities may lead to information disclosure. Content from file system or network shares for the machine processing the XML can be exposed to attacker. In addition, an attacker can use this as a DoS vector.</value>
    <comment>CA3077</comment>
  </data>
  <data name="MakeDtdProcessingSecureInApiDesignXmlTextReaderDescription" xml:space="preserve">
    <value>Ensure that  DTD processing is secure on all instances of classes derived from System.Xml.XmlTextReader by setting XmlResolver and DtdProcessing properties to secure values. Enable DTD processing on the XmlTextReader and using UrlResolver for resolving external XML entities may lead to information disclosure. Content from file system or network shares for the machine processing the XML can be exposed to attacker. In addition, an attacker can use this as a DoS vector.</value>
    <comment>CA3077</comment>
  </data>
  <data name="ReviewDtdProcessingPropertiesDescription" xml:space="preserve">
    <value>Review code to insure that the property is set from a trusted source. This pattern internally enables DTD processing in XML and uses XmlUrlResolver for resolving external XML entities, which, on untrusted input, may lead to information disclosure. Content from file system or network shares for the machine processing the XML can be exposed to attacker. In addition, an attacker can use this as a DoS vector.</value>
    <comment>CA3075</comment>
  </data>
  <data name="ReviewDtdProcessingPropertiesDiagnosis" xml:space="preserve">
    <value>Ensure DataViewSettingCollectionString property of DataViewManager is assigned from a trusted source, otherwise avoid using this control.</value>
    <comment>CA3075</comment>
  </data>
  <data name="XmlDocumentDerivedClassConstructorNoSecureXmlResolverDiagnosis" xml:space="preserve">
    <value>Constructor of XmlDocument derived class implicitly uses insecure default value for DTD processing.</value>
    <comment>CA3077</comment>
  </data>
  <data name="XmlDocumentDerivedClassNoConstructorDiagnosis" xml:space="preserve">
    <value>XmlDocument derived class doesn't explictily define a constructor, therefore enables insecure DTD processing by default.</value>
    <comment>CA3077</comment>
  </data>
  <data name="XmlDocumentDerivedClassSetInsecureXmlResolverInMethodDiagnosis" xml:space="preserve">
    <value>Method of XmlDocument derived class sets XmlResolver property to an insecure value.</value>
    <comment>CA3077</comment>
  </data>
  <data name="XmlDocumentUseSecureResolverDescription" xml:space="preserve">
    <value>This usage is potentially unsafe as untrusted external resources may be resolved during read operations. Ensure to set the XmlResolver property to null or an instance of XmlSecureResolver when processing untrusted input. Using insecure resolver (including the dafault resolver) for resolving external XML entities may lead to information disclosure. Content from file system or network shares for the machine processing the XML can be exposed to attacker. In addition, an attacker can use this as a DoS vector.</value>
    <comment>CA3075</comment>
  </data>
  <data name="XmlDocumentWithNoSecureResolverDiagnosis" xml:space="preserve">
    <value>An XmlDocument instance is created without setting its XmlResolver property to a secure value. </value>
    <comment>CA3075</comment>
  </data>
  <data name="XmlReaderCreateInsecureConstructedDiagnosis" xml:space="preserve">
    <value>An insecure XmlReaderSettings instance is provided to XmlReader.Create method.</value>
    <comment>CA3075</comment>
  </data>
  <data name="XmlReaderCreateInsecureDescription" xml:space="preserve">
    <value>Invoking XmlReader.Create method without providing a secure XmlReaderSettings instance is potentially unsafe as it enables DTD processing and uses XmlUrlResolver for resolving external XML entities, which, on untrusted input, may lead to information disclosure.  Content from file system or network shares for the machine processing the XML can be exposed to attacker. In addition, an attacker can use this as a DoS vector. Ensure the XmlReaderSettings instance is secure by settings DtdProcessing property to false, or MaxCharactersFromEntities property to a small value and XmlResolver proeprty to a secure resolver (XmlSecureResolver or null).</value>
    <comment>CA3075</comment>
  </data>
  <data name="XmlReaderCreateInsecureInputDiagnosis" xml:space="preserve">
    <value>A potentially insecure XmlReaderSettings instance is provided to XmlReader.Create method. Consider explicitly setting secure values to the instance at call site.</value>
    <comment>CA3075</comment>
  </data>
  <data name="XmlReaderCreateWrongOverloadDiagnosis" xml:space="preserve">
    <value>Do not use an insecure overload of XmlReader.Create which does not accept an XmlReaderSettings argument.</value>
    <comment>CA3075</comment>
  </data>
  <data name="XmlTextReaderConstructedWithNoSecureResolutionDiagnosis" xml:space="preserve">
    <value>Do not create XmlTextReader instance with insecure default settings.</value>
    <comment>CA3075</comment>
  </data>
  <data name="XmlTextReaderDerivedClassConstructorNoSecureSettingsDiagnosis" xml:space="preserve">
    <value>Constructor of XmlTextReader derived class uses insecure default values for DTD processing.</value>
    <comment>CA3077</comment>
  </data>
  <data name="XmlTextReaderDerivedClassNoConstructorDiagnosis" xml:space="preserve">
    <value>XmlTextReader derived class doesn't explictily define a constructor.</value>
    <comment>CA3077</comment>
  </data>
  <data name="XmlTextReaderDerivedClassSetInsecureSettingsInMethodDiagnosis" xml:space="preserve">
    <value>Method of XmlTextReader derived class sets XmlResolver and/or DtdProcessing property to insecure value.</value>
    <comment>CA3077</comment>
  </data>
  <data name="XmlTextReaderInsecureResolutionDescription" xml:space="preserve">
    <value>Creating an XmlTextReader instance without disabling DTD processing  and using a secure resolver for resolving external XML entities may lead to information disclosure on untrusted input. Content from file system or network shares for the machine processing the XML can be exposed to attacker. In addition, an attacker can use this as a DoS vector. Ensure the DtdProcessing property to false and XmlResolver proeprty to a secure resolver (XmlSecureResolver or null), or use XmlReader.Create method with a secure XmlReaderSettings argument instead. </value>
    <comment>CA3075</comment>
  </data>
  <data name="XmlTextReaderSetInsecureResolutionDiagnosis" xml:space="preserve">
    <value>Do not set XmlTextReader instance with insecure values.</value>
    <comment>CA3075</comment>
  </data>
  <data name="XslCompiledTransformLoadInsecureConstructedDiagnosis" xml:space="preserve">
    <value>An insecure combination of XsltSettings and XmlResolver instances are provided to XslCompiledTransfor.Load as arguments. </value>
    <comment>CA3076</comment>
  </data>
  <data name="XslCompiledTransformLoadInsecureInputDiagnosis" xml:space="preserve">
    <value>A potentially insecure XsltSettings instance and an insecure XmlResolver instance are provided to XslCompiledTransform.Load as arguments. To avoid false alarm, consider creating a secure XsltSettings instance at the call site.</value>
    <comment>CA3076</comment>
  </data>
</root>